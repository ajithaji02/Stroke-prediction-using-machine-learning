# -*- coding: utf-8 -*-
"""researchproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eqhtGH4HvkYFum2K0ZIC6nHuIQqvzf_0
"""

import numpy as np

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RandomizedSearchCV
from sklearn.svm import SVC
from sklearn import svm
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv('/content/drive/MyDrive/archive/healthcare-dataset-stroke-data.csv')

from google.colab import drive
drive.mount('/content/drive')

df.head()

df.info()

df.describe()

df.duplicated().sum()

df.drop(['id'], axis = 1, inplace = True)

df.dropna(axis = 0, inplace = True)

num_columns = df.select_dtypes(include=['number']).columns

plt.figure(figsize=(6, 10))

sns.set(style="whitegrid")

for i, column in enumerate(num_columns):
    plt.subplot(len(num_columns), 1, i + 1)
    sns.boxplot(x=df[column])
    plt.title(f'Boxplot for {column}')

plt.tight_layout()
plt.show()

corr = df.corr()

plt.figure(figsize=(7, 7))

sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)

plt.title('Correlation Heatmap')

plt.tight_layout()

plt.show()

df['hypertension'].replace({0: 'have hypertension', 1: 'does not have hypertension'}, inplace=True)
df['heart_disease'].replace({0: 'have heart disease', 1: 'does not have heart disease'}, inplace=True)

df['stroke'].replace({0: 'The patient had not a stroke', 1: 'The patient had a stroke'}, inplace=True)

categorical_vars =  ['gender','smoking_status','stroke', 'ever_married']

num_vars = len(categorical_vars)

num_cols = 2

num_rows = (num_vars + 1) // 2  # Calculate the number of rows needed

fig, axes = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=(10, 6))

axes = axes.flatten()

for i, var in enumerate(categorical_vars):
    var_counts = df[var].value_counts()

    axes[i].pie(var_counts, labels=var_counts.index, autopct='%1.1f%%', startangle=90)
    axes[i].set_title(f'Pie chart for {var.capitalize()}')

for j in range(i + 1, num_rows * num_cols):
    fig.delaxes(axes[j])


plt.tight_layout()
plt.show()

sns.set_style("whitegrid")

plt.figure(figsize=(8, 5))
sns.kdeplot(data=df, x='age', hue='stroke', fill=True, palette='husl')

plt.title('Density Plot of age by patients having stroke')
plt.xlabel('age')
plt.ylabel('stroke')

plt.tight_layout()
plt.show()

plt.figure(figsize=(7, 6))
sns.countplot(data=df, x='gender', hue='stroke')

plt.title('Count of strokes for each gender')
plt.xlabel('Gender')
plt.ylabel('Count stroke')

plt.legend(title='Stroke')
plt.show()

plt.figure(figsize=(7, 6))
sns.countplot(data=df, x='smoking_status', hue='stroke')

plt.title('Strokes according to smoking status of patients')
plt.xlabel('Smoking status')
plt.ylabel('Count stroke')

plt.legend(title='Stroke')
plt.show()

fig, axes = plt.subplots(1, 2, figsize=(10, 5))

# Plot the first bar plot
sns.countplot(data=df, x='gender', hue='hypertension', ax=axes[0])
axes[0].set_title('Hypertension by Gender')
axes[0].set_xlabel('Gender')
axes[0].set_ylabel('Count')

# Plot the second bar plot
sns.countplot(data=df, x='gender', hue='heart_disease', ax=axes[1])
axes[1].set_title('Heart Disease by Gender')
axes[1].set_xlabel('Gender')
axes[1].set_ylabel('Count')

# Adjust layout
plt.tight_layout()

# Show plot
plt.show()

plt.figure(figsize=(8, 6))
palette = sns.color_palette("Set1")
sns.histplot(data=df, x="Residence_type", hue="stroke", bins=20, palette= palette)

plt.title('Impact of recidence on stroke occurrence')
plt.xlabel('Residence')
plt.ylabel('Count')

label_encoder = LabelEncoder()
for col in df.columns:
  if df[col].dtype == 'object':
    df[col] = label_encoder.fit_transform(df[col])

x = df.drop(['stroke'], axis = 1)

y = df['stroke']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)

rs = RandomizedSearchCV(
    estimator = SVC(gamma='auto'),
    param_distributions={
        'C': [1, 10, 20],
        'kernel': ['rbf', 'linear']
    },
    cv=5,
    return_train_score=False,
    n_iter=4
)

rs.fit(x_train_scaled, y_train)

pd.DataFrame(rs.cv_results_)[['param_C','param_kernel','mean_test_score']]

svm_model = svm.SVC(C=20, kernel= 'linear',)
svm_model.fit(x_train, y_train)

y_pred_test = svm_model.predict(x_test_scaled)

svm_accuracy_test = accuracy_score(y_test, y_pred_test)
print(f"Test Accuracy: {round(svm_accuracy_test * 100,2)}%")

y_pred_train = svm_model.predict(x_train_scaled)

svm_accuracy_train = accuracy_score(y_train, y_pred_train)
print(f"Train Accuracy: {round(svm_accuracy_train * 100,2)}%")

conf_matrix = confusion_matrix(y_test, y_pred_test)

plt.figure(figsize=(5, 5))

sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['0','1'], yticklabels=['0','1'])
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix Heatmap')

plt.tight_layout()
plt.show()